{"ast":null,"code":"import{FigureUpdateEvent,RoomUnitChatStyleComposer,UserInfoEvent,UserSettingsEvent}from'@nitrots/nitro-renderer';import{useEffect,useState}from'react';import{useBetween}from'use-between';import{GetLocalStorage,GetSessionDataManager,SendMessageComposer}from'../../api';import{useMessageEvent}from'../events';import{useLocalStorage}from'../useLocalStorage';const useSessionInfoState=()=>{const[userInfo,setUserInfo]=useState(null);const[userFigure,setUserFigure]=useState(null);const[chatStyleId,setChatStyleId]=useState(0);const[userRespectRemaining,setUserRespectRemaining]=useState(0);const[petRespectRemaining,setPetRespectRemaining]=useState(0);const[screenSize,setScreenSize]=useLocalStorage('nitro.screensize',{width:window.innerWidth,height:window.innerHeight});const updateChatStyleId=styleId=>{setChatStyleId(styleId);SendMessageComposer(new RoomUnitChatStyleComposer(styleId));};const respectUser=userId=>{GetSessionDataManager().giveRespect(userId);setUserRespectRemaining(GetSessionDataManager().respectsLeft);};const respectPet=petId=>{GetSessionDataManager().givePetRespect(petId);setPetRespectRemaining(GetSessionDataManager().respectsPetLeft);};useMessageEvent(UserInfoEvent,event=>{const parser=event.getParser();setUserInfo(parser.userInfo);setUserFigure(parser.userInfo.figure);setUserRespectRemaining(parser.userInfo.respectsRemaining);setPetRespectRemaining(parser.userInfo.respectsPetRemaining);});useMessageEvent(FigureUpdateEvent,event=>{const parser=event.getParser();setUserFigure(parser.figure);});useMessageEvent(UserSettingsEvent,event=>{const parser=event.getParser();setChatStyleId(parser.chatType);});useEffect(()=>{const currentScreenSize=GetLocalStorage('nitro.screensize');if(currentScreenSize&&(currentScreenSize.width!==window.innerWidth||currentScreenSize.height!==window.innerHeight)){let i=window.localStorage.length;while(i>0){const key=window.localStorage.key(i);if(key&&key.startsWith('nitro.window'))window.localStorage.removeItem(key);i--;}}const onResize=event=>setScreenSize({width:window.innerWidth,height:window.innerHeight});window.addEventListener('resize',onResize);return()=>{window.removeEventListener('resize',onResize);};},[setScreenSize]);return{userInfo,userFigure,chatStyleId,userRespectRemaining,petRespectRemaining,respectUser,respectPet,updateChatStyleId};};export const useSessionInfo=()=>useBetween(useSessionInfoState);","map":null,"metadata":{},"sourceType":"module"}