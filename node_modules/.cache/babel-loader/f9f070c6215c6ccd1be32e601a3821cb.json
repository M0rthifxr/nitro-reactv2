{"ast":null,"code":"import{ConditionDefinition,TriggerDefinition,UpdateActionMessageComposer,UpdateConditionMessageComposer,UpdateTriggerMessageComposer,WiredActionDefinition,WiredFurniActionEvent,WiredFurniConditionEvent,WiredFurniTriggerEvent,WiredSaveSuccessEvent}from'@nitrots/nitro-renderer';import{useEffect,useState}from'react';import{useBetween}from'use-between';import{IsOwnerOfFloorFurniture,LocalizeText,SendMessageComposer,WiredFurniType,WiredSelectionVisualizer}from'../../api';import{useMessageEvent}from'../events';import{useNotification}from'../notification';const useWiredState=()=>{const[trigger,setTrigger]=useState(null);const[intParams,setIntParams]=useState([]);const[stringParam,setStringParam]=useState('');const[furniIds,setFurniIds]=useState([]);const[actionDelay,setActionDelay]=useState(0);const[allowsFurni,setAllowsFurni]=useState(WiredFurniType.STUFF_SELECTION_OPTION_NONE);const{showConfirm=null}=useNotification();const saveWired=()=>{const save=trigger=>{if(!trigger)return;if(trigger instanceof WiredActionDefinition){SendMessageComposer(new UpdateActionMessageComposer(trigger.id,intParams,stringParam,furniIds,actionDelay,trigger.stuffTypeSelectionCode));}else if(trigger instanceof TriggerDefinition){SendMessageComposer(new UpdateTriggerMessageComposer(trigger.id,intParams,stringParam,furniIds,trigger.stuffTypeSelectionCode));}else if(trigger instanceof ConditionDefinition){SendMessageComposer(new UpdateConditionMessageComposer(trigger.id,intParams,stringParam,furniIds,trigger.stuffTypeSelectionCode));}};if(!IsOwnerOfFloorFurniture(trigger.id)){showConfirm(LocalizeText('wiredfurni.nonowner.change.confirm.body'),()=>{save(trigger);},null,null,null,LocalizeText('wiredfurni.nonowner.change.confirm.title'));}else{save(trigger);}};const selectObjectForWired=(objectId,category)=>{if(!trigger||!allowsFurni)return;if(objectId<=0)return;setFurniIds(prevValue=>{const newFurniIds=[...prevValue];const index=prevValue.indexOf(objectId);if(index>=0){newFurniIds.splice(index,1);WiredSelectionVisualizer.hide(objectId);}else if(newFurniIds.length<trigger.maximumItemSelectionCount){newFurniIds.push(objectId);WiredSelectionVisualizer.show(objectId);}return newFurniIds;});};useMessageEvent(WiredSaveSuccessEvent,event=>{const parser=event.getParser();setTrigger(null);});useMessageEvent(WiredFurniActionEvent,event=>{const parser=event.getParser();setTrigger(parser.definition);});useMessageEvent(WiredFurniConditionEvent,event=>{const parser=event.getParser();setTrigger(parser.definition);});useMessageEvent(WiredFurniTriggerEvent,event=>{const parser=event.getParser();setTrigger(parser.definition);});useEffect(()=>{if(!trigger)return;return()=>{setIntParams([]);setStringParam('');setActionDelay(0);setFurniIds(prevValue=>{if(prevValue&&prevValue.length)WiredSelectionVisualizer.clearSelectionShaderFromFurni(prevValue);return[];});setAllowsFurni(WiredFurniType.STUFF_SELECTION_OPTION_NONE);};},[trigger]);return{trigger,setTrigger,intParams,setIntParams,stringParam,setStringParam,furniIds,setFurniIds,actionDelay,setActionDelay,setAllowsFurni,saveWired,selectObjectForWired};};export const useWired=()=>useBetween(useWiredState);","map":null,"metadata":{},"sourceType":"module"}